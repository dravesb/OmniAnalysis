D <- D + t(D)
if(plot == TRUE){
image(Matrix(D))
}
#return
return(D)
}
D <- dissim_mat(A_list)
D <- dissim_mat(A_list, option = 2)
D
L_hat[c(start_i:end_i, start_j:end_j), ]
get_test_stat()
get_test_stat
#get statistic: option 1 for covariance corrected
#               option 2 for Frobenius distance
get_test_stat <- function(L_hat, option = 1, ...) return(ifelse(option == 1, W_hat_stat(L_hat, ...), T_hat_stat(L_hat)))
require(pacman)
pacman::p_load(rARPACK, RCurl, MASS)
source('/Users/benjamindraves/Desktop/OmniAnalysis/code_base/basic_functions.R')
source('/Users/benjamindraves/Desktop/OmniAnalysis/code_base/hypothesis_testing.R')
source('/Users/benjamindraves/Desktop/OmniAnalysis/code_base/layer_clustering.R')
D <- dissim_mat(A_list)
D
image(D)
image(Matrix(D))
pacman::p_load(rARPACK, RCurl, MASS, Matrix)
image(Matrix(D))
D_t <- dissim_mat(A_list, plot = TRUE, option = 2)
D_t <- dissim_mat(A_list, plot = TRUE, option = 1)
dev.off()
D_t <- dissim_mat(A_list, plot = TRUE, option = 2)
plot = TRUE
#make omnibus matrix
Atil <- make_omni(A_list)
m <- length(A_list)
n <- nrow(A_list[[1]])
#embedd
L_hat <- ase(Atil)
#set up D matrix
D <- matrix(0, ncol = m, nrow = m)
for(i in 1:(m-1)){
for(j in (i+1):m){
#get indices
start_i <- n*(i-1) + 1; end_i <- n*i
start_j <- n*(j-1) + 1; end_j <- n*j
print(c(start_i, start_j))
#store test statistic
D[i,j] <- get_test_stat(L_hat[c(start_i:end_i, start_j:end_j), ], option)
}
}
#symmetrize and plo
D <- D + t(D)
if(plot == TRUE){
image(Matrix(D))
}
plot_matrix = TRUE
dev.off()
D <- D + t(D)
if(plot_matrix == TRUE){
image(Matrix(D))
}
#Dissimalarity matrix construction
dissim_mat <- function(A_list, plot_matrix = F, option = 1){
#make omnibus matrix
Atil <- make_omni(A_list)
m <- length(A_list)
n <- nrow(A_list[[1]])
#embedd
L_hat <- ase(Atil)
#set up D matrix
D <- matrix(0, ncol = m, nrow = m)
for(i in 1:(m-1)){
for(j in (i+1):m){
#get indices
start_i <- n*(i-1) + 1; end_i <- n*i
start_j <- n*(j-1) + 1; end_j <- n*j
#store test statistic
D[i,j] <- get_test_stat(L_hat[c(start_i:end_i, start_j:end_j), ], option)
}
}
#symmetrize and plot
D <- D + t(D)
if(plot_matrix == TRUE){
plt <- image(Matrix(D))
}
#return
return(list(D, plt))
}
D_t <- dissim_mat(A_list, plot_matrix = TRUE, option = 2)
D_t
#Dissimalarity matrix construction
dissim_mat <- function(A_list, plot_matrix = F, option = 1){
#make omnibus matrix
Atil <- make_omni(A_list)
m <- length(A_list)
n <- nrow(A_list[[1]])
#embedd
L_hat <- ase(Atil)
#set up D matrix
D <- matrix(0, ncol = m, nrow = m)
for(i in 1:(m-1)){
for(j in (i+1):m){
#get indices
start_i <- n*(i-1) + 1; end_i <- n*i
start_j <- n*(j-1) + 1; end_j <- n*j
#store test statistic
D[i,j] <- get_test_stat(L_hat[c(start_i:end_i, start_j:end_j), ], option)
}
}
#symmetrize
D <- D + t(D)
#return matrix
if(plot_matrix == TRUE){
plt <- image(Matrix(D), col = 'red')
ret <- list(D, plt); names(ret) <- c('Matrix', 'Plot')
return(ret)
}
#return
return(list(D, plt))
}
D_t <- dissim_mat(A_list, plot_matrix = TRUE, option = 2)
D_t <- dissim_mat(A_list, plot_matrix = FALSE, option = 2)
#Dissimalarity matrix construction
dissim_mat <- function(A_list, plot_matrix = F, option = 1){
#make omnibus matrix
Atil <- make_omni(A_list)
m <- length(A_list)
n <- nrow(A_list[[1]])
#embedd
L_hat <- ase(Atil)
#set up D matrix
D <- matrix(0, ncol = m, nrow = m)
for(i in 1:(m-1)){
for(j in (i+1):m){
#get indices
start_i <- n*(i-1) + 1; end_i <- n*i
start_j <- n*(j-1) + 1; end_j <- n*j
#store test statistic
D[i,j] <- get_test_stat(L_hat[c(start_i:end_i, start_j:end_j), ], option)
}
}
#symmetrize
D <- D + t(D)
#return matrix
if(plot_matrix == TRUE){
plt <- image(Matrix(D), col = 'red')
ret <- list(D, plt); names(ret) <- c('Matrix', 'Plot')
return(ret)
}
#return
return(D)
}
D_t <- dissim_mat(A_list, plot_matrix = FALSE, option = 2)
D_t
image(Dt)
image(D_t)
image(matrix(D_t))
image(Matrix(D_t))
D_t <- dissim_mat(A_list, plot_matrix = TRUE, option = 2)
getElbows()
getElbows
image(Matrix(Dt))
image(Matrix(D_t))
image(Matrix(D_t), col = 'red')
?image(Matrix(D_t), col = 'red')
?adjustcolor
pacman::p_load(rARPACK, RCurl, MASS, Matrix, grDevices)
#Dissimalarity matrix construction
dissim_mat <- function(A_list, plot_matrix = FALSE, option = 1){
#make omnibus matrix
Atil <- make_omni(A_list)
m <- length(A_list)
n <- nrow(A_list[[1]])
#embedd
L_hat <- ase(Atil)
#set up D matrix
D <- matrix(0, ncol = m, nrow = m)
for(i in 1:(m-1)){
for(j in (i+1):m){
#get indices
start_i <- n*(i-1) + 1; end_i <- n*i
start_j <- n*(j-1) + 1; end_j <- n*j
#store test statistic
D[i,j] <- get_test_stat(L_hat[c(start_i:end_i, start_j:end_j), ], option)
}
}
#symmetrize
D <- D + t(D)
#return matrix
if(plot_matrix == TRUE){
image(Matrix(D), col.regions = adjustcolor('red', alpha.f = 0.6))
return(ret)
}
#return
return(D)
}
D_t <- dissim_mat(A_list, plot_matrix = TRUE, option = 2)
#Dissimalarity matrix construction
dissim_mat <- function(A_list, plot_matrix = FALSE, option = 1){
#make omnibus matrix
Atil <- make_omni(A_list)
m <- length(A_list)
n <- nrow(A_list[[1]])
#embedd
L_hat <- ase(Atil)
#set up D matrix
D <- matrix(0, ncol = m, nrow = m)
for(i in 1:(m-1)){
for(j in (i+1):m){
#get indices
start_i <- n*(i-1) + 1; end_i <- n*i
start_j <- n*(j-1) + 1; end_j <- n*j
#store test statistic
D[i,j] <- get_test_stat(L_hat[c(start_i:end_i, start_j:end_j), ], option)
}
}
#symmetrize & plot if necessary
D <- D + t(D)
if(plot_matrix == TRUE){
image(Matrix(D), col.regions = adjustcolor('red', alpha.f = 0.6))
}
#return
return(D)
}
D_t <- dissim_mat(A_list, plot_matrix = TRUE, option = 2)
#------------------------------------------------------------------------------------------------
#           Layer Clustering and Visualizations
#
# dissim_mat - a function that constructs a dissimilarity matrix between layers
# cluster_mat - preforms clustering on the dissimilarity matrix
#------------------------------------------------------------------------------------------------
#Dissimalarity matrix construction
dissim_mat <- function(A_list, plot_matrix = FALSE, option = 1){
#make omnibus matrix
Atil <- make_omni(A_list)
m <- length(A_list)
n <- nrow(A_list[[1]])
#embedd
L_hat <- ase(Atil)
#set up D matrix
D <- matrix(0, ncol = m, nrow = m)
for(i in 1:(m-1)){
for(j in (i+1):m){
#get indices
start_i <- n*(i-1) + 1; end_i <- n*i
start_j <- n*(j-1) + 1; end_j <- n*j
#store test statistic
D[i,j] <- get_test_stat(L_hat[c(start_i:end_i, start_j:end_j), ], option)
}
}
#symmetrize & plot if necessary
D <- D + t(D)
if(plot_matrix == TRUE){
image(Matrix(D), col.regions = adjustcolor('red', alpha.f = 0.6))
hist(rnorm(100))
}
#return
return(D)
}
#clustering of layers via clustering the Dissimilarity matrix
cluster_layers <- function(D, plot = F, ...){
}
D_t <- dissim_mat(A_list, plot_matrix = TRUE, option = 2)
#------------------------------------------------------------------------------------------------
#           Layer Clustering and Visualizations
#
# dissim_mat - a function that constructs a dissimilarity matrix between layers
# cluster_mat - preforms clustering on the dissimilarity matrix
#------------------------------------------------------------------------------------------------
#Dissimalarity matrix construction
dissim_mat <- function(A_list, plot_matrix = FALSE, option = 1){
#make omnibus matrix
Atil <- make_omni(A_list)
m <- length(A_list)
n <- nrow(A_list[[1]])
#embedd
L_hat <- ase(Atil)
#set up D matrix
D <- matrix(0, ncol = m, nrow = m)
for(i in 1:(m-1)){
for(j in (i+1):m){
#get indices
start_i <- n*(i-1) + 1; end_i <- n*i
start_j <- n*(j-1) + 1; end_j <- n*j
#store test statistic
D[i,j] <- get_test_stat(L_hat[c(start_i:end_i, start_j:end_j), ], option)
}
}
#symmetrize & plot if necessary
D <- D + t(D)
if(plot_matrix == TRUE){
dev.new()
image(Matrix(D), col.regions = adjustcolor('red', alpha.f = 0.6))
}
#return
return(D)
}
#clustering of layers via clustering the Dissimilarity matrix
cluster_layers <- function(D, plot = F, ...){
}
D_t <- dissim_mat(A_list, plot_matrix = TRUE, option = 2)
dev.off()
D_t <- dissim_mat(A_list, plot_matrix = TRUE, option = 2)
hclust(D_t)
D_t
hclust(D_t)
class(D_t)
?hclust
dist(rnorm(10))
class(dist(rnorm(10)))
?dist
as.dist(D)
as.dist(D_t)
#clustering of layers via clustering the Dissimilarity matrix
cluster_layers <- function(D, plot = F, option = 1){
if(option == 1){
hc <- hc(as.dist(D))
plot(hc)
}
}
cluster_layers(D_t)
#clustering of layers via clustering the Dissimilarity matrix
cluster_layers <- function(D, plot = F, option = 1){
if(option == 1){
hc <- hclust(as.dist(D))
plot(hc)
}
}
cluster_layers(D_t)
h
hc
hc <- hclust(as.dist(D))
hc
?hclust
?cutree
#clustering of layers via clustering the Dissimilarity matrix
cluster_layers <- function(D, plot = F, option = 1){
if(option == 1){
hc <- hclust(as.dist(D))
plot(hc)
#want to do this in an unsupervised fashion
groups <- cutree(H.fit, k=3)
}
}
cluster_layers <- function(D, plot = F, option = 1){
if(option == 1){
hc <- hclust(as.dist(D))
plot(hc)
#want to do this in an unsupervised fashion
groups <- cutree(H.fit, k=3)
return(groups)
}
}
clustering_layers(D_t)
cluster_layers(D_t)
#clustering of layers via clustering the Dissimilarity matrix
cluster_layers <- function(D, plot = F, option = 1){
if(option == 1){
hc <- hclust(as.dist(D))
plot(hc)
#want to do this in an unsupervised fashion
groups <- cutree(hc, k=3)
return(groups)
}
}
cluster_layers(D_t)
dev.off()
cluster_layers(D_t)
hc <- hclust(as.dist(D))
plot(hc)
#want to do this in an unsupervised fashion
groups <- cutree(hc, k=3)
hc
D_T
cluster_layers(D_t)
#clustering of layers via clustering the Dissimilarity matrix
cluster_layers <- function(D, plot = F, k = 2, option = 1){
if(option == 1){
hc <- hclust(as.dist(D))
plot(hc)
#want to do this in an unsupervised fashion
groups <- cutree(hc, k=2)
return(groups)
}
}
#want to do this in an unsupervised fashion
groups <- cutree(hc, k)
#clustering of layers via clustering the Dissimilarity matrix
cluster_layers <- function(D, plot = F, k = 2, option = 1){
if(option == 1){
hc <- hclust(as.dist(D))
plot(hc)
#want to do this in an unsupervised fashion
groups <- cutree(hc, k)
return(groups)
}
}
cluster_layers(D_t, k = 3)
cluster_layers(D_t, k = 2)
dev.off()
cluster_layers(D_t, k = 2)
ls()
#Capitalize Layer Names
layer_names <- as.vector(sapply(aarhus_mplex$layerNames, function(x) paste0(toupper(substring(x, 1, 1)), substring(x, 2))))
devtools::install_github('achab94/mplex')
library(mplex)
data(aarhus_mplex)
#format as Adjacency Matrices
n <- nrow(aarhus_mplex$nodes)
m <- length(unique(aarhus_mplex$layerNames))
A_list <- lapply(1:m, function(x) elist_to_adj(as.matrix(aarhus_mplex[[x + 2]][1:2])))
#Capitalize Layer Names
layer_names <- as.vector(sapply(aarhus_mplex$layerNames, function(x) paste0(toupper(substring(x, 1, 1)), substring(x, 2))))
layer_names
groups
cluster_layers(D_t, k = 2)
cluster_layers()
cluster_layers
D_t
cluster_layers(D_t, k = 2)
hc <- hclust(as.dist(D))
plot(hc)
hc
as.dist(D)
#want to do this in an unsupervised fashion
groups <- cutree(hc, k)
plot(hc)
hc
plot(hc)
#------------------------------------------------------------------------------------------------
#             Load All
#
# load packages: rARPACK, RCurl, MASS
# load scripts: basic_functions, hypothesis_testing
#------------------------------------------------------------------------------------------------
require(pacman)
pacman::p_load(rARPACK, RCurl, MASS, Matrix, grDevices)
source('/Users/benjamindraves/Desktop/OmniAnalysis/code_base/basic_functions.R')
source('/Users/benjamindraves/Desktop/OmniAnalysis/code_base/hypothesis_testing.R')
source('/Users/benjamindraves/Desktop/OmniAnalysis/code_base/layer_clustering.R')
rm(list = ls())
#------------------------------------------------------------------------------------------------
#             Load All
#
# load packages: rARPACK, RCurl, MASS
# load scripts: basic_functions, hypothesis_testing
#------------------------------------------------------------------------------------------------
require(pacman)
pacman::p_load(rARPACK, RCurl, MASS, Matrix, grDevices)
source('/Users/benjamindraves/Desktop/OmniAnalysis/code_base/basic_functions.R')
source('/Users/benjamindraves/Desktop/OmniAnalysis/code_base/hypothesis_testing.R')
source('/Users/benjamindraves/Desktop/OmniAnalysis/code_base/layer_clustering.R')
#------------------------------------------------------------------------------------------------
#             Load All
#
# load packages: rARPACK, RCurl, MASS
# load scripts: basic_functions, hypothesis_testing
#------------------------------------------------------------------------------------------------
require(pacman)
pacman::p_load(rARPACK, RCurl, MASS, Matrix, grDevices)
source('/Users/benjamindraves/Desktop/OmniAnalysis/code_base/basic_functions.R')
source('/Users/benjamindraves/Desktop/OmniAnalysis/code_base/hypothesis_testing.R')
source('/Users/benjamindraves/Desktop/OmniAnalysis/code_base/layer_clustering.R')
#read in adjacency matrices
A1 <- as.matrix(read.table('./adj_mats/A1.txt'))
A2 <- as.matrix(read.table('./adj_mats/A2.txt'))
A3 <- as.matrix(read.table('./adj_mats/A3.txt'))
A4 <- as.matrix(read.table('./adj_mats/A4.txt'))
A5 <- as.matrix(read.table('./adj_mats/A5.txt'))
getwd()
#set directory
setwd('~/Desktop/OmniAnalysis/Aarhus_CS/')
A1 <- as.matrix(read.table('./adj_mats/A1.txt'))
A2 <- as.matrix(read.table('./adj_mats/A2.txt'))
A3 <- as.matrix(read.table('./adj_mats/A3.txt'))
A4 <- as.matrix(read.table('./adj_mats/A4.txt'))
A5 <- as.matrix(read.table('./adj_mats/A5.txt'))
A_list <- list()
A_list[[1]] <- A1
A_list[[2]] <- A2
A_list[[3]] <- A3
A_list[[4]] <- A4
A_list[[5]] <- A5
D <- dissim_mat(A_list, plot_matrix = TRUE, option = 2)
D
cluster_layers(D)
hc <- hclust(as.dist(D))
#want to do this in an unsupervised fashion
groups <- cutree(hc, k)
k = 2
#want to do this in an unsupervised fashion
groups <- cutree(hc, k)
groups
class(hc)
plot(hc)
plot(hc, hang = -1, main = "Sample Tree", cex = .5)
names(hc)
plot.hclust(hc)
plot(hc)
hc
names(hc)
hc$merge
mc$height
hc$height
hc$order
hc$method
dev.off()
plot(hc)
dev.new()
plot(hc)
dev.off(
)
